from mxdev import Hook
from mxdev import State
import abc
import logging
import os
import sys


NAMESPACE = 'mxenv-'


###############################################################################
# logging
###############################################################################

logger = logging.getLogger('mxenv')


def setup_logger(level):
    root = logging.getLogger()
    root.setLevel(level)
    handler = logging.StreamHandler(sys.stdout)
    handler.setLevel(level)
    if level == logging.DEBUG:
        formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        )
        handler.setFormatter(formatter)
    root.addHandler(handler)


###############################################################################
# utils
###############################################################################

def ns_name(name):
    return '{}{}'.format(NAMESPACE, name)


def list_value(value):
    if not value:
        return list()
    return [v.strip() for v in value.replace('\n', ' ').strip().split(' ')]


###############################################################################
# template basics
###############################################################################

class template:
    _registry = dict()

    def __init__(self, name):
        self.name = name

    def __call__(self, ob):
        ob.name = self.name
        self._registry[self.name] = ob
        return ob

    @classmethod
    def lookup(cls, name):
        return cls._registry.get(name)


class Template(abc.ABC):
    name = None

    def __init__(self, config):
        self.config = config

    @property
    def settings(self):
        return self.config.hooks.get(ns_name(self.name), {})

    def ensure_directory(self, name):
        if not os.path.exists(name):
            os.mkdir(name)

    @abc.abstractmethod
    def write(self):
        """Write script to filesystem."""


###############################################################################
# script template basics
###############################################################################

SCRIPT_TEMPLATE = """\
#!/bin/bash
#
# THIS SCRIPT IS GENERATED BY MXENV.
# CHANGES MADE IN THIS FILE MAY BE LOST.
#
{description}
{content}
exit 0
"""


def render_script(description, content):
    return SCRIPT_TEMPLATE.format(
        description='\n'.join([
            '# {}'.format(line) for line in description.split('\n')
        ]),
        content=content
    )


ENV_TEMPLATE = """\
{setenv}
{content}
{unsetenv}
"""


def render_env(env, content):
    return ENV_TEMPLATE.format(
        setenv='\n'.join([
            'export {}="{}"'.format(k, v) for k, v in env.items()
        ]),
        content=content,
        unsetenv='\n'.join(['unset {}'.format(k) for k in env])
    )


class ScriptTemplate(Template):

    @property
    def env(self):
        env_name = self.settings.get('environment')
        return self.config.hooks.get(ns_name(env_name), {}) if env_name else {}

    def write(self):
        self.ensure_directory('scripts')
        with open(os.path.join('scripts', self.name), 'w') as f:
            f.write(render_script(
                self.description,
                render_env(self.env, self.render())
            ))


###############################################################################
# test script template
###############################################################################

TEST_TEMPLATE = """
./bin/zope-testrunner --auto-color --auto-progress \\
{testpaths}
    --module=$1
"""


@template('test.sh')
class Test(ScriptTemplate):
    description = 'Run tests'

    def package_paths(self, attr):
        paths = list()
        for name, package in self.config.packages.items():
            if attr not in package:
                continue
            path = '{target}/{name}/{path}'.format(
                target=package['target'],
                name=name,
                path=package[attr]
            ).rstrip('/')
            paths.append(path)
        return paths

    def render(self):
        paths = self.package_paths(ns_name('test-path'))
        return TEST_TEMPLATE.format(
            testpaths='\n'.join(
                ['    --test-path={} \\'.format(p) for p in paths]
            )
        )


###############################################################################
# coverage script template
###############################################################################

COVERAGE_TEMPLATE = """
sources=(
{sourcepaths}
)

sources=$(printf ",%s" "${{sources[@]}}")
sources=${{sources:1}}

./bin/coverage run \\
    --source=$sources \\
    -m zope.testrunner --auto-color --auto-progress \\
{testpaths}

./bin/coverage report
./bin/coverage html
"""


@template('coverage.sh')
class Coverage(Test):
    description = 'Run coverage'

    def render(self):
        tpaths = self.package_paths(ns_name('test-path'))
        spaths = self.package_paths(ns_name('source-path'))
        return COVERAGE_TEMPLATE.format(
            sourcepaths='\n'.join(['    {}'.format(p) for p in spaths]),
            testpaths='\n'.join(
                ['    --test-path={} \\'.format(p) for p in tpaths]
            ).rstrip(' \\')
        )


###############################################################################
# clean script template
###############################################################################

CLEAN_TEMPLATE = """
to_remove=(
{to_remove}
)

for item in "${{to_remove[@]}}"; do
    if [ -e "$item" ]; then
        rm -rf "$item"
    fi
done
"""


@template('clean.sh')
class Clean(Test):
    description = 'Clean development environment'
    to_remove = ['constraints-mxdev.txt', 'requirements-mxdev.txt']
    template_to_remove = {
        'coverage.sh': ['.coverage', 'htmlcov'],
        'venv.sh': ['bin', 'include', 'lib64', 'lib', 'pyvenv.cfg', 'share'],
        'docs.sh': ['docs/html']
    }

    def render(self):
        to_remove = list()
        to_remove += self.to_remove
        templates = list_value(self.config.settings.get(ns_name('templates')))
        for name in templates:
            to_remove += self.template_to_remove.get(name, list())
        to_remove += list_value(self.settings.get('to-remove'))
        return CLEAN_TEMPLATE.format(
            to_remove='\n'.join(['    {}'.format(it) for it in to_remove])
        )


###############################################################################
# mxdev hook
###############################################################################

class MxEnv(Hook):
    namespace = NAMESPACE

    def __init__(self):
        setup_logger(logging.INFO)

    def write(self, state: State) -> None:
        config = state.configuration
        templates = list_value(config.settings.get(ns_name('templates')))
        if not templates:
            logger.info('mxenv: No templates defined')
            return
        for name in templates:
            factory = template.lookup(name)
            if not factory:
                msg = 'mxenv: No template registered under name {}'.format(name)
                logger.warning(msg)
                continue
            factory(config).write()
