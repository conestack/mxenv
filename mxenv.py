from mxdev import Hook
from mxdev import State
import os


SCRIPT_TEMPLATE = """\
#!/bin/bash
#
# THIS SCRIPT IS GENERATED BY MXENV.
# CHANGES MADE IN THIS FILE MAY BE LOST.
#
{description}
{content}
exit 0
"""


class Script:

    def render(self, description, content):
        return SCRIPT_TEMPLATE.format(
            description='\n'.join([
                '# {}'.format(line) for line in description.split('\n')
            ]),
            content=content
        )


ENV_TEMPLATE = """\
{setenv}
{content}
{unsetenv}
"""


class Environment:

    def __init__(self, **kw):
        self.env = kw

    def render(self, content):
        return ENV_TEMPLATE.format(
            setenv='\n'.join([
                'export {}="{}"'.format(k, v) for k, v in self.env.items()
            ]),
            content=content,
            unsetenv='\n'.join(['unset {}'.format(k) for k in self.env])
        )


TEST_TEMPLATE = """\
./bin/zope-testrunner --auto-color --auto-progress \\
{testpaths}
    --module=$1
"""


class Test:

    def paths(self, test_packages, attr):
        paths = list()
        for name, package in test_packages.items():
            if attr not in package:
                continue
            path = '{target}/{name}/{path}'.format(
                target=package['target'],
                name=name,
                path=package[attr]
            ).rstrip('/')
            paths.append(path)
        return paths

    def render(self, test_packages):
        paths = self.paths(test_packages, 'mxenv-test-path')
        return TEST_TEMPLATE.format(
            testpaths='\n'.join(
                ['    --test-path={} \\'.format(p) for p in paths]
            )
        )


COVERAGE_TEMPLATE = """\
sources=(
{sourcepaths}
)

sources=$(printf ",%s" "${{sources[@]}}")
sources=${{sources:1}}

./bin/coverage run \\
    --source=$sources \\
    -m zope.testrunner --auto-color --auto-progress \\
{testpaths}

./bin/coverage report
./bin/coverage html
"""


class Coverage(Test):

    def render(self, test_packages):
        tpaths = self.paths(test_packages, 'mxenv-test-path')
        spaths = self.paths(test_packages, 'mxenv-source-path')
        return COVERAGE_TEMPLATE.format(
            sourcepaths='\n'.join(['    {}'.format(p) for p in spaths]),
            testpaths='\n'.join(
                ['    --test-path={} \\'.format(p) for p in tpaths]
            ).rstrip(' \\')
        )


class MxEnv(Hook):
    namespace = 'mxenv-'

    def write(self, state: State) -> None:
        config = state.configuration
        env = Environment(**config.hooks.get('mxenv-environment', {}))
        test_packages = dict()
        for name, package in config.packages.items():
            if 'mxenv-test-path' in package:
                test_packages[name] = package
        if test_packages:
            self.ensure_scripts_location()
            script = Script()
            test = Test()
            self.write_script('test.sh', script.render(
                'Run tests',
                env.render(test.render(test_packages))
            ))
            coverage = Coverage()
            self.write_script('coverage.sh', script.render(
                'Run coverage',
                env.render(coverage.render(test_packages))
            ))

    def ensure_scripts_location(self):
        if not os.path.exists('scripts'):
            os.mkdir('scripts')

    def write_script(self, name, data):
        with open(os.path.join('scripts', name), 'w') as f:
            f.write(data)
