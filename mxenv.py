from mxdev import Hook
from mxdev import State


SCRIPT_TEMPLATE = """\
#!/bin/bash
#
# THIS SCRIPT IS GENERATED BY MXENV.
# CHANGES MADE IN THIS FILE MAY BE LOST.
#
{description}
{content}
exit 0
"""


class Script:

    def render(self, description, content):
        return SCRIPT_TEMPLATE.format(
            description='\n'.join([
                '# {}'.format(line) for line in description.split('\n')
            ]),
            content=content
        )


ENV_TEMPLATE = """\
{setenv}
{content}
{unsetenv}
"""


class Environment:

    def __init__(self, **kw):
        self.env = kw

    def render(self, content):
        return ENV_TEMPLATE.format(
            setenv='\n'.join([
                'export {}={}'.format(k, v) for k, v in self.env.items()
            ]),
            content=content,
            unsetenv='\n'.join(['unset {}'.format(k) for k in self.env])
        )


TEST_TEMPLATE = """\
./bin/zope-testrunner --auto-color --auto-progress \\
{testpaths}
"""


class Test:

    def test_paths(self, test_packages):
        test_paths = list()
        for name, package in test_packages.items():
            testpath = '{target}/{name}/{testpath}'.format(
                target=package['target'],
                name=name,
                testpath=package['mxenv-test-path']
            )
            test_paths.append(testpath)
        return test_paths

    def render(self, test_packages):
        paths = self.test_paths(test_packages)
        return TEST_TEMPLATE.format(
            testpaths='\n'.join(['    --test-path={} \\'.format(p) for p in paths])
        )


COVERAGE_TEMPLATE = """\
sources=(
    {sourcepaths}
)

sources=$(printf ",%s" "${sources[@]}")
sources=${sources:1}

./bin/coverage run \\
    --source=$sources \\
    -m zope.testrunner --auto-color --auto-progress \\
{testpaths}

./bin/coverage report
./bin/coverage html
"""


class Coverage(Test):

    def render(self, test_packages):
        paths = self.test_paths(test_packages)
        return TEST_TEMPLATE.format(
            sourcepaths='\n'.join(['    {}'.format(p) for p in paths]),
            testpaths='\n'.join(['    --test-path={} \\'.format(p) for p in paths])
        )


class MxEnv(Hook):
    namespace = 'mxenv-'

    def read(self, state: State) -> None:
        config = state.configuration
        self.env = Environment(**config.hooks.get('mxenv-environment', {}))
        self.test_packages = dict()
        for name, package in config.packages.items():
            if package.get('mxenv-test-path'):
                self.test_packages[name] = package

    def write(self, state: State) -> None:
        """Gets executed after mxdev write operation."""
        print(self.env.env)
        print(self.test_packages)
