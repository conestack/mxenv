mxenv
=====

An extension for `mxdev <https://github.com/bluedynamics/mxdev>`_.


Overview
--------

This tool supports generating helper scripts for developing python packages.
Configuration is done inside the ``mxdev.ini`` file.

It's initial target is for development of the repositories contained in the
 `conestack <https://github.com/conestack>`_ organization on github.

Helper scripts are generated from templates which are defined in the
``settings`` section of ``mxdev.ini``:

.. code-block:: ini

    [settings]
    mxenv-templates = name1 name2

Additional template related settings are defined in dedicated config sections
named after ``mxenv-<templatename>``:

.. code-block:: ini

    [mxenv-name1]
    setting = value

This package is in alpha state. If you encounter bugs or like to improve it,
please file an issue at github.


Bootstrap
---------

To bootstrap a new project with mxenv, run the following:

    wget https://raw.githubusercontent.com/conestack/mxenv/master/Makefile
    make bootstrap


Templates
---------

test.sh
~~~~~~~

A script for running tests of python packages defined as mxdev sources. It
utilizes ``zope-testrunner``, thus expects it to be installed.

The generation target is ``scripts/test.sh``.

Configuration looks like so:

.. code-block:: ini

    [settings]
    # tell mxenv to generate test script
    mxenv-templates = test.sh

    # optional system variables to set before running the tests
    [mxenv-env]
    ENVVAR = value

    # test script related settings
    [mxenv-test.sh]
    # the section to use for environment variables
    environment = env


coverage.sh
~~~~~~~~~~~

A script for running coverage tests of python packages defined as mxdev sources.
It utilizes ``zope-testrunner`` and ``coverage``, thus expects these packages to
be installed.

The generation target is ``scripts/coverage.sh``.

Configuration looks like so:

.. code-block:: ini

    [settings]
    # tell mxenv to generate coverage script
    mxenv-templates = coverage.sh

    # optional system variables to set before running tests and coverage
    [mxenv-env]
    ENVVAR = value

    # coverage script related settings
    [mxenv-coverage.sh]
    # the section to use for environment variables
    environment = env


clean.sh
~~~~~~~~

A script to cleanup development environment. It deletes files and folders
created during installation.

The generation target is ``scripts/clean.sh``.

Which items get deleted depends to a certain degree on which scripts are
generated.

Files which are always removed, are:

- constraints-mxdev.txt
- requirements-mxdev.txt

If ``coverage.sh`` is present, additionally the following items are removed:

- .coverage
- htmlcov

If ``docs.sh`` is present, additionally the following items are removed:

- docs/html

If ``venv.sh`` is present, additionally the following items are removed:

- bin
- include
- lib64
- lib
- pyvenv.cfg
- share

Configuration looks like so:

.. code-block:: ini

    [settings]
    # tell mxenv to generate clean script
    mxenv-templates = clean.sh

    # clean script related settings
    [mxenv-clean.sh]
    # additional items to remove at cleanup
    to-remove = item1 item2


deps.sh
~~~~~~~

A script to install required system dependencies for development.

Currently it depends on ``sudo`` and ``apt``.

The generation target is ``scripts/deps.sh``.

Configuration looks like so:

.. code-block:: ini

    [settings]
    # tell mxenv to generate deps script
    mxenv-templates = deps.sh

    # deps script related settings
    [mxenv-deps.sh]
    # system packages to install
    dependencies = build-essential curl


docs.sh
~~~~~~~

A script to run sphinx docs.

The docs sources are expected at ``docs/source`` and get generated to
``docs/html``.

Configuration looks like so:

.. code-block:: ini

    [settings]
    # tell mxenv to generate docs script
    mxenv-templates = docs.sh

    # this script currently has no template related settings


venv.sh
~~~~~~~

A script for installing a virtualenv.

The generated script creates a virtualenv, installs/updates ``pip``,
``setuptools`` and ``wheel``, runs optional install steps defined in the
config file and calls ``pip`` with the requirements file generated by
``mxdev`` (requirements-mxdev.txt).

Configuration looks like so:

.. code-block:: ini

    [settings]
    # tell mxenv to generate venv script
    mxenv-templates = venv.sh

    # venv script related settings
    [mxenv-venv.sh]
    # optional install commands. Useful if packages need to be installed
    # in a custom way
    custom-install =
        ./bin/pip install \
        --no-use-pep517 \
        --global-option=build_ext \
        package_name


Contributors
============

- Robert Niederreiter
